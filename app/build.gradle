apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "io.hudepohl.mvvm"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    //  libs directory
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // custom processor
    compileOnly project(':annotations')
    kapt project(':annotation-processors')

    // android support
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:cardview-v7:$supportVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:support-annotations:$supportVersion"

    // android arch
    implementation "android.arch.lifecycle:runtime:$archLifecycleVersion"
    implementation "android.arch.lifecycle:extensions:$archLifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$archLifecycleVersion"

    // kotlin
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    // dagger 2
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // moshi
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

    // okhttp
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okHttpVersion"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    // rxjava 2
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxKotlinVersion"

    // test
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockitoKotlinVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-supportv4:$robolectricVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"

    // android test
    androidTestImplementation "com.android.support.test:runner:$androidTestSupportVersion"
    androidTestImplementation "com.android.support.test:rules:$androidTestSupportVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "com.nhaarman:mockito-kotlin-kt1.1:$mockitoKotlinVersion"
}

// Kotlin plugin to create 'open' classes via annotations, which is useful for testing.
// More here: https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin
apply plugin: 'kotlin-allopen'
allOpen {
    annotation("io.hudepohl.mvvm.util.Mockable")
}
